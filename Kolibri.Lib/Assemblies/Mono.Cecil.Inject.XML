<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mono.Cecil.Inject</name>
    </assembly>
    <members>
        <member name="T:Mono.Cecil.Inject.AssemblyLoader">
            <summary>
                Class for assembly loading methods.
            </summary>
        </member>
        <member name="M:Mono.Cecil.Inject.AssemblyLoader.LoadAssembly(System.String)">
            <summary>
                Loads an assembly from the specified path.
            </summary>
            <param name="path">Path to the assembly. Can be either relative (to the executing assembly directory) or absolute.</param>
            <returns>An instance of <see cref="T:Mono.Cecil.AssemblyDefinition" /> of the loaded assembly.</returns>
        </member>
        <member name="T:Mono.Cecil.Inject.CollectionUtils">
            <summary>
                Miscellaneous methods for processing enumerable collections.
            </summary>
        </member>
        <member name="M:Mono.Cecil.Inject.CollectionUtils.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
                Runs the specified function for each element.
            </summary>
            <typeparam name="T">Type of the elements in the enumerable.</typeparam>
            <param name="self">Reference to the sequence that contains the elements.</param>
            <param name="action">Action to apply to each element.</param>
        </member>
        <member name="M:Mono.Cecil.Inject.CollectionUtils.Range``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
                Gets a range of elements.
            </summary>
            <param name="self">Refrence to the sequence which to get the values from.</param>
            <param name="start">The index of the first element to pick.</param>
            <param name="end">The end of the last element to pick.</param>
            <typeparam name="T">Type of the sequence.</typeparam>
            <returns>A new instance of <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containes the selected elements.</returns>
        </member>
        <member name="M:Mono.Cecil.Inject.CollectionUtils.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
                Gets a range of elements starting from a specified element.
            </summary>
            <typeparam name="T">Type of the sequence.</typeparam>
            <param name="self">Refrence to the sequence which to get the values from.</param>
            <param name="start">The index of the first element to pick.</param>
            <param name="count">The total number of elements to select.</param>
            <returns>A new instance of <see cref="T:System.Collections.Generic.IEnumerable`1" /> that containes the selected elements.</returns>
        </member>
        <member name="T:Mono.Cecil.Inject.InjectionDefinitionException">
            <summary>
                An exception thrown when there is an issue when attempting to link the target method with the injection method.
            </summary>
        </member>
        <member name="M:Mono.Cecil.Inject.InjectionDefinitionException.#ctor(System.String)">
            <summary>
                Initialises the exception with a message.
            </summary>
            <param name="message">Message to display.</param>
        </member>
        <member name="T:Mono.Cecil.Inject.ILUtils">
            <summary>
                Miscellaneous utilities used by the injector.
            </summary>
        </member>
        <member name="M:Mono.Cecil.Inject.ILUtils.CopyInstruction(Mono.Cecil.Cil.Instruction)">
            <summary>
                Creates a new IL instruction that is a copy of the provided one. Does not link the new instruction to a method.
            </summary>
            <param name="ins">Instruction to copy.</param>
            <returns>A copy of the provided IL instruction.</returns>
        </member>
        <member name="M:Mono.Cecil.Inject.ILUtils.ReplaceInstruction(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>
                Replaces the insturction with another by replacing the opcode and the operand.
                Unlike <see cref="M:Mono.Cecil.Cil.ILProcessor.Replace(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)" />, preserves the references to the original instruction (which branches
                might use, for instance).
            </summary>
            <param name="original">The instruction to replace.</param>
            <param name="newIns">The instruction to replace with.</param>
        </member>
        <member name="T:Mono.Cecil.Inject.InjectionDefinition">
            <summary>
                The core class containing all the injector methods.
            </summary>
        </member>
        <member name="M:Mono.Cecil.Inject.InjectionDefinition.#ctor(Mono.Cecil.MethodDefinition,Mono.Cecil.MethodDefinition,Mono.Cecil.Inject.InjectFlags,System.Int32[],Mono.Cecil.FieldDefinition[])">
            <summary>
                Attempts to construct an instance of <see cref="T:Mono.Cecil.Inject.InjectionDefinition" /> by linking the injection method with the
                injection target (the method to be injected).
                The way how the method is injected is specified by the injection flags. If the injection method does not match the
                criteria set by the injection flags, an exception will be thrown.
            </summary>
            <param name="injectTarget">The method that will be injected.</param>
            <param name="injectMethod">The method which to inject.</param>
            <param name="flags">Injection flags that specify what values to pass to the injection method and how to inject it.</param>
            <param name="localVarIDs">
                An array of indicies of local variables to pass to the injection method. Used only if
                <see cref="F:Mono.Cecil.Inject.InjectFlags.PassLocals" /> is specified, otherwise ignored.
            </param>
            <param name="memberReferences">
                An array of class fields from the type the target lies in to pass to the injection
                method. Used only if <see cref="F:Mono.Cecil.Inject.InjectFlags.PassFields" /> is specified, otherwise ignored.
            </param>
        </member>
        <member name="P:Mono.Cecil.Inject.InjectionDefinition.Flags">
            <summary>
                Flags that specify how the injection will be performed and which parameters are to be passed to the injection
                method.
            </summary>
        </member>
        <member name="P:Mono.Cecil.Inject.InjectionDefinition.InjectMethod">
            <summary>
                The injection method; the method the call of which will be injected into the target.
            </summary>
        </member>
        <member name="P:Mono.Cecil.Inject.InjectionDefinition.InjectTarget">
            <summary>
                The injection target-
            </summary>
        </member>
        <member name="P:Mono.Cecil.Inject.InjectionDefinition.LocalVarIDs">
            <summary>
                An array of indicies of local variables to pass to the injection method. Used only if
                <see cref="F:Mono.Cecil.Inject.InjectFlags.PassLocals" /> is specified, otherwise null.
            </summary>
        </member>
        <member name="P:Mono.Cecil.Inject.InjectionDefinition.MemberReferences">
            <summary>
                An array of class fields from the type the target lies in to pass to the injection method. Used only if
                <see cref="F:Mono.Cecil.Inject.InjectFlags.PassFields" /> is specified, otherwise null.
            </summary>
        </member>
        <member name="M:Mono.Cecil.Inject.InjectionDefinition.Inject(System.Int32,System.Int32,Mono.Cecil.Inject.InjectDirection)">
            <summary>
                Inject the call of the injection method into the target.
            </summary>
            <param name="startCode">
                The index of the instruction from which to start injecting. If positive, will count from the
                beginning of the method. If negative, will count from the end. For instance, -1 is the method's last instruction
                and 0 is the first.
            </param>
            <param name="token">
                If <see cref="F:Mono.Cecil.Inject.InjectFlags.PassTag" /> is specified, the value of this parameter will be passed as a
                parameter to the injection method.
            </param>
            <param name="direction">The direction in which to insert the call: either above the start code or below it.</param>
        </member>
        <member name="M:Mono.Cecil.Inject.InjectionDefinition.Inject(System.Int32,System.Object,Mono.Cecil.Inject.InjectDirection)">
            <summary>
                Inject the call of the injection method into the target.
            </summary>
            <param name="startCode">
                The index of the instruction from which to start injecting. If positive, will count from the
                beginning of the method. If negative, will count from the end. For instance, -1 is the method's last instruction
                and 0 is the first.
            </param>
            <param name="token">
                If <see cref="F:Mono.Cecil.Inject.InjectFlags.PassTag" /> is specified, the value of this parameter will be passed as a
                parameter to the injection method.
            </param>
            <param name="direction">The direction in which to insert the call: either above the start code or below it.</param>
        </member>
        <member name="M:Mono.Cecil.Inject.InjectionDefinition.Inject(Mono.Cecil.Cil.Instruction,System.Int32,Mono.Cecil.Inject.InjectDirection)">
            <summary>
                Inject the call of the injection method into the target.
            </summary>
            <param name="startCode">The instruction from which to start injecting.</param>
            <param name="token">
                If <see cref="F:Mono.Cecil.Inject.InjectFlags.PassTag" /> is specified, the value of this parameter will be passed as a
                parameter to the injection method.
            </param>
            <param name="direction">The direction in which to insert the call: either above the start code or below it.</param>
        </member>
        <member name="M:Mono.Cecil.Inject.InjectionDefinition.Inject(Mono.Cecil.Cil.Instruction,System.Object,Mono.Cecil.Inject.InjectDirection)">
            <summary>
                Inject the call of the injection method into the target.
            </summary>
            <param name="startCode">The instruction from which to start injecting.</param>
            <param name="token">
                If <see cref="F:Mono.Cecil.Inject.InjectFlags.PassTag" /> is specified, the value of this parameter will be passed as a
                parameter to the injection method.
            </param>
            <param name="direction">The direction in which to insert the call: either above the start code or below it.</param>
        </member>
        <member name="T:Mono.Cecil.Inject.InjectDirection">
            <summary>
                Specifies the direction in which to insert the injection code.
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectDirection.Before">
            <summary>
                Insert the injection code before the specified instruction.
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectDirection.After">
            <summary>
                Insert the injection code after the specified instruction.
            </summary>
        </member>
        <member name="T:Mono.Cecil.Inject.InjectFlags">
            <summary>
                Enumeration of possible parameters to pass to the injection method and different ways to inject the code.
                The flags are used by Cecil.Inject to search for the right injection method and to inject it the right way.
                The enumeration also dictates the order in which certain method parameters must be specified in the injection
                (hook) method
                in order to be recognized by Cecil.Inject correctly.
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectFlags.None">
            <summary>
                No paramaters are passed to the injection method (hook). Therefore the hook method must not have any parameters in
                its signature.
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectFlags.PassTag">
            <summary>
                A 32-bit constant signed integer is passed to the injection method. The constant is specified when injecting.
                <b>Note:</b> Only one type of a constant tag can be used at a time. If both are set, <see cref="F:Mono.Cecil.Inject.InjectFlags.PassTag" />
                overrides <see cref="F:Mono.Cecil.Inject.InjectFlags.PassStringTag" />.
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectFlags.PassInvokingInstance">
            <summary>
                Pass the instance of the type which calls (invokes) the injection method (hook). The type of this parameter is the
                one that contains the injected method.
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectFlags.ModifyReturn">
            <summary>
                Specifies Cecil.Inject that the injection method should be allowed to prematurely stop the execution of the
                injected method.
                In addition, of the injected method has a return value, the injection method (hook) should be allowed to modify it.
                In this case the return type of the injection method (hook) MUST be a boolean. If the injected method has a return
                type (not void), the hook must
                have a reference parameter (marked as "out") of the same type as that of what the injected method returns.
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectFlags.PassLocals">
            <summary>
                Pass local variables found in the injected method. The variables will be passed as references (marked as "ref").
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectFlags.PassFields">
            <summary>
                Pass class fields of the type that contains the injected method. The method must not be static.
                The variables will be passed as references (marked as "ref").
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectFlags.PassParametersVal">
            <summary>
                Pass all parameters of the injected method. The parameters are passed by value.
                <b>Note:</b> Some methods (like constructor of <see cref="T:Mono.Cecil.Inject.InjectionDefinition" />) implement partial parameter
                passing.
                It means that the injection method doesn't need to have all of the parameters for injected method (as long as they
                are in the same order).
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectFlags.PassParametersRef">
            <summary>
                Pass all parameters of the injected method. The parameters are passed by reference (marked as "ref").
                <b>Note:</b> Some methods (like constructor of <see cref="T:Mono.Cecil.Inject.InjectionDefinition" />) implement partial parameter
                passing.
                It means that the injection method doesn't need to have all of the parameters for injected method (as long as they
                are in the same order).
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectFlags.PassStringTag">
            <summary>
                A constant string is passed to the injection method. The constant is specified when performing the injection.
                <b>Note:</b> Only one type of a constant tag can be used at a time. If both are set, <see cref="F:Mono.Cecil.Inject.InjectFlags.PassTag" />
                overrides <see cref="F:Mono.Cecil.Inject.InjectFlags.PassStringTag" />.
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectFlags.All_Val">
            <summary>
                Same as PassTag | PassInvokingInstance | PassLocals | PassFields | PassParametersVal
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectFlags.All_Ref">
            <summary>
                Same as PassTag | PassInvokingInstance | PassLocals | PassFields | PassParametersRef
            </summary>
        </member>
        <member name="T:Mono.Cecil.Inject.InjectValues">
            <summary>
                A convenience sturcture that can be used to process <see cref="T:Mono.Cecil.Inject.InjectFlags" /> as properties instead of flags.
            </summary>
        </member>
        <member name="T:Mono.Cecil.Inject.InjectValues.PassParametersType">
            <summary>
                Enumeration of how the parameters are passed
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectValues.PassParametersType.None">
            <summary>
                No parameters are passed at all
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectValues.PassParametersType.ByValue">
            <summary>
                Pass parameters by value
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectValues.PassParametersType.ByReference">
            <summary>
                Pass parameters by reference
            </summary>
        </member>
        <member name="T:Mono.Cecil.Inject.InjectValues.PassTagType">
            <summary>
                Enumeration of how the tag is passed
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectValues.PassTagType.None">
            <summary>
                No tags are passed.
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectValues.PassTagType.Int32">
            <summary>
                An integer tag is passed
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectValues.PassTagType.String">
            <summary>
                A string tag is passed
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectValues.ModifyReturn">
            <summary>
                Specifies Cecil.Inject that the injection method should be allowed to prematurely stop the execution of the
                injected method.
                In addition, of the injected method has a return value, the injection method (hook) should be allowed to modify it.
                In this case the return type of the injection method (hook) MUST be a boolean. If the injected method has a return
                type (not void), the hook must
                have a reference parameter (marked as "out") of the same type as that of what the injected method returns.
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectValues.ParameterType">
            <summary>
                Specifies how parameters should be passed
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectValues.PassFields">
            <summary>
                Pass class fields of the type that contains the injected method. The method must not be static.
                The variables will be passed as references (marked as "ref").
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectValues.PassInvokingInstance">
            <summary>
                Pass the instance of the type which calls (invokes) the injection method (hook). The type of this parameter is the
                one that contains the injected method.
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectValues.PassLocals">
            <summary>
                Pass local variables found in the injected method. The variables will be passed as references (marked as "ref").
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.InjectValues.TagType">
            <summary>
                Type of the tag that will get passed.
            </summary>
        </member>
        <member name="M:Mono.Cecil.Inject.InjectValues.#ctor(Mono.Cecil.Inject.InjectFlags)">
            <summary>
                Convert the injection flags into an instance of InjectValues.
            </summary>
            <param name="flags">Flags to convert.</param>
        </member>
        <member name="P:Mono.Cecil.Inject.InjectValues.PassTag">
            <summary>
                Pass a constant value to the injection method. The value is specified when calling
                <see cref="M:Mono.Cecil.Inject.InjectionDefinition.Inject(System.Int32,System.Object,Mono.Cecil.Inject.InjectDirection)" />.
            </summary>
        </member>
        <member name="P:Mono.Cecil.Inject.InjectValues.PassParameters">
            <summary>
                If true, parameters will be passed (either by value or by reference).
            </summary>
        </member>
        <member name="P:Mono.Cecil.Inject.InjectValues.PassParametersByRef">
            <summary>
                If true, parameters will be passed by reference.
            </summary>
        </member>
        <member name="M:Mono.Cecil.Inject.InjectValues.GetCombinedFlags">
            <summary>
                Combines the specified properties into an equivalent value of <see cref="T:Mono.Cecil.Inject.InjectFlags" />.
            </summary>
            <returns>The combination of the properties in a single <see cref="T:Mono.Cecil.Inject.InjectFlags" /> value to use in injection.</returns>
        </member>
        <member name="T:Mono.Cecil.Inject.InjectFlagMethods">
            <summary>
                Extension methods for <see cref="T:Mono.Cecil.Inject.InjectFlags" /> enumeration.
            </summary>
        </member>
        <member name="M:Mono.Cecil.Inject.InjectFlagMethods.IsSet(Mono.Cecil.Inject.InjectFlags,Mono.Cecil.Inject.InjectFlags)">
            <summary>
                Checks whether a certain flag has been set in the given flag.
            </summary>
            <param name="flags">Flag combination to check.</param>
            <param name="flag">Flag to check with.</param>
            <returns>True, if the specified flag is specified in the flag combination.</returns>
        </member>
        <member name="M:Mono.Cecil.Inject.InjectFlagMethods.ToValues(Mono.Cecil.Inject.InjectFlags)">
            <summary>
                Converts the flag (combination) into an instance of <see cref="T:Mono.Cecil.Inject.InjectValues" />.
            </summary>
            <param name="flags">Flags to convert.</param>
            <returns>The injection flags represented as an instance of <see cref="T:Mono.Cecil.Inject.InjectValues" />.</returns>
        </member>
        <member name="T:Mono.Cecil.Inject.LogMask">
            <summary>
                General logging masks to turn on/off certain logging messages (if logging is enabled). These are reserved for
                methods found in Cecil.Inject.
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.LogMask.Inject">
            <summary>
                Log messages from injection methods.
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.LogMask.TypeCompare">
            <summary>
                Log messages from type comparison methods.
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.LogMask.GetInjectionMethod">
            <summary>
                Log messages from <see cref="M:Mono.Cecil.Inject.TypeDefinitionExtensions.GetInjectionMethod(Mono.Cecil.TypeDefinition,System.String,Mono.Cecil.MethodDefinition,Mono.Cecil.Inject.InjectFlags,System.Int32[],Mono.Cecil.FieldDefinition[])" />
            </summary>
        </member>
        <member name="F:Mono.Cecil.Inject.LogMask.ChangeAccess">
            <summary>
                Log messages from <see cref="M:Mono.Cecil.Inject.TypeDefinitionExtensions.ChangeAccess(Mono.Cecil.TypeDefinition,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
            </summary>
        </member>
        <member name="T:Mono.Cecil.Inject.Logger">
            <summary>
                Logger. Works only in the DEBUG build.
            </summary>
        </member>
        <member name="P:Mono.Cecil.Inject.Logger.LogOutput">
            <summary>
                The destination of the log messages. If not set, defaults to the standard output.
            </summary>
        </member>
        <member name="M:Mono.Cecil.Inject.Logger.IsSet(System.UInt32)">
            <summary>
                Checks whether a certaing logging flag is set.
            </summary>
            <param name="mask">The flag to check.</param>
            <returns>True, if logging should be done when the given mask is encountered.</returns>
        </member>
        <member name="M:Mono.Cecil.Inject.Logger.Log(System.UInt32,System.String)">
            <summary>
                Writes a message to the log if the given logging mask is set.
            </summary>
            <param name="mask">The logging mask to which to send the message. Think of it like a separate message channel.</param>
            <param name="message">Message to log, if the mask is set.</param>
        </member>
        <member name="M:Mono.Cecil.Inject.Logger.LogLine(System.UInt32,System.String)">
            <summary>
                Writes a message to the log if the given logging mask is set. Appends a line break at the end of the message.
            </summary>
            <param name="mask">The logging mask to which to send the message. Think of it like a separate message channel.</param>
            <param name="message">Message to log, if the mask is set.</param>
        </member>
        <member name="M:Mono.Cecil.Inject.Logger.LogLine(System.UInt32)">
            <summary>
                Writes a line break to the log if the given logging mask is set.
            </summary>
            <param name="mask">The logging mask to which to send the message. Think of it like a separate message channel.</param>
        </member>
        <member name="M:Mono.Cecil.Inject.Logger.SetLogMask(System.UInt32)">
            <summary>
                Sets the log mask on so that the log could write messages when it encounters this mask.
            </summary>
            <param name="mask">The mask to set.</param>
        </member>
        <member name="M:Mono.Cecil.Inject.Logger.UnsetMask(System.UInt32)">
            <summary>
                Unsets the log mask on so that the log wouldn't output messages with the given mask.
            </summary>
            <param name="mask">The mask to unset.</param>
        </member>
        <member name="T:Mono.Cecil.Inject.MethodDefinitionExtensions">
            <summary>
                Extensions to <see cref="T:Mono.Cecil.MethodDefinition" />.
            </summary>
        </member>
        <member name="M:Mono.Cecil.Inject.MethodDefinitionExtensions.GetInjector(Mono.Cecil.MethodDefinition,Mono.Cecil.TypeDefinition,System.String,Mono.Cecil.Inject.InjectFlags,System.Int32[],Mono.Cecil.FieldDefinition[])">
            <summary>
                Finds a method that could be used as an injection method (hook) for this method and constructs an instance of
                <see cref="T:Mono.Cecil.Inject.InjectionDefinition" /> from it.
            </summary>
            <param name="target">This method that is used as a target.</param>
            <param name="injectionType">Type that contains the injection method (hook).</param>
            <param name="name">Name of the injection method (hook).</param>
            <param name="flags">
                Injection flags that specify what values to pass to the injection method and how to inject it. This
                method attempts to find the hook method that satisfies all the specified flags.
            </param>
            <param name="localsID">
                An array of indicies of local variables to pass to the injection method. Used only if
                <see cref="F:Mono.Cecil.Inject.InjectFlags.PassLocals" /> is specified, otherwise ignored.
            </param>
            <param name="typeFields">
                An array of class fields from the type the target lies in to pass to the injection method.
                Used only if <see cref="F:Mono.Cecil.Inject.InjectFlags.PassFields" /> is specified, otherwise ignored.
            </param>
            <returns>
                An instance of <see cref="T:Mono.Cecil.Inject.InjectionDefinition" />, if a suitable injection method is found from the given
                type. Otherwise, null.
            </returns>
        </member>
        <member name="M:Mono.Cecil.Inject.MethodDefinitionExtensions.InjectWith(Mono.Cecil.MethodDefinition,Mono.Cecil.MethodDefinition,System.Int32,System.Object,Mono.Cecil.Inject.InjectFlags,Mono.Cecil.Inject.InjectDirection,System.Int32[],Mono.Cecil.FieldDefinition[])">
            <summary>
                Inject a hook call into this method.
            </summary>
            <param name="method">This method that is used as a target.</param>
            <param name="injectionMethod">The method the call of which to inject.</param>
            <param name="codeOffset">
                The index of the instruction from which to start injecting. If positive, will count from the
                beginning of the method. If negative, will count from the end. For instance, -1 is the method's last instruction
                and 0 is the first.
            </param>
            <param name="tag">
                If <see cref="F:Mono.Cecil.Inject.InjectFlags.PassTag" /> is specified, the value of this parameter will be passed as a
                parameter to the injection method.
            </param>
            <param name="flags">Injection flags that specify what values to pass to the injection method and how to inject it.</param>
            <param name="dir">The direction in which to insert the call: either above the start code or below it.</param>
            <param name="localsID">
                An array of indicies of local variables to pass to the injection method. Used only if
                <see cref="F:Mono.Cecil.Inject.InjectFlags.PassLocals" /> is specified, otherwise ignored.
            </param>
            <param name="typeFields">
                An array of class fields from the type the target lies in to pass to the injection method.
                Used only if <see cref="F:Mono.Cecil.Inject.InjectFlags.PassFields" /> is specified, otherwise ignored.
            </param>
        </member>
        <member name="M:Mono.Cecil.Inject.MethodDefinitionExtensions.InjectWith(Mono.Cecil.MethodDefinition,Mono.Cecil.MethodDefinition,System.Int32,System.Int32,Mono.Cecil.Inject.InjectFlags,Mono.Cecil.Inject.InjectDirection,System.Int32[],Mono.Cecil.FieldDefinition[])">
            <summary>
                Inject a hook call into this method.
            </summary>
            <param name="method">This method that is used as a target.</param>
            <param name="injectionMethod">The method the call of which to inject.</param>
            <param name="codeOffset">
                The index of the instruction from which to start injecting. If positive, will count from the
                beginning of the method. If negative, will count from the end. For instance, -1 is the method's last instruction
                and 0 is the first.
            </param>
            <param name="tag">
                If <see cref="F:Mono.Cecil.Inject.InjectFlags.PassTag" /> is specified, the value of this parameter will be passed as a
                parameter to the injection method.
            </param>
            <param name="flags">Injection flags that specify what values to pass to the injection method and how to inject it.</param>
            <param name="dir">The direction in which to insert the call: either above the start code or below it.</param>
            <param name="localsID">
                An array of indicies of local variables to pass to the injection method. Used only if
                <see cref="F:Mono.Cecil.Inject.InjectFlags.PassLocals" /> is specified, otherwise ignored.
            </param>
            <param name="typeFields">
                An array of class fields from the type the target lies in to pass to the injection method.
                Used only if <see cref="F:Mono.Cecil.Inject.InjectFlags.PassFields" /> is specified, otherwise ignored.
            </param>
        </member>
        <member name="T:Mono.Cecil.Inject.ParamHelper">
            <summary>
                Specifies methods for easy parameter type creation and conversion between <see cref="T:System.Type" /> and
                <see cref="T:Mono.Cecil.TypeReference" />.
                Most likely you won't need to use these, as Cecil.Inject does the conversion for you.
            </summary>
        </member>
        <member name="M:Mono.Cecil.Inject.ParamHelper.CreateDummyType(System.String)">
            <summary>
                Creates a fake type with the specified name to use in place of generic types.
            </summary>
            <param name="name">Name of the type to create.</param>
            <returns>An instance of <see cref="T:System.Type" /> for the specified fake type.</returns>
        </member>
        <member name="M:Mono.Cecil.Inject.ParamHelper.CreateGeneric(System.String)">
            <summary>
                Creates a generic type with a specified name.
            </summary>
            <param name="name">Name of the generic to create.</param>
            <returns>
                Type reference for the generic type. The generic type does not have a namespace nor any properties besides its
                name and the fact that it is a generic type.
            </returns>
        </member>
        <member name="M:Mono.Cecil.Inject.ParamHelper.FromType``1">
            <summary>
                Obtains the type reference from <see cref="T:System.Type" /> that has generic parameters.
            </summary>
            <typeparam name="T">Type to turn into Mono.Cecil representation of type refrence.</typeparam>
            <returns>Type reference of the type that contains generic parameters.</returns>
        </member>
        <member name="M:Mono.Cecil.Inject.ParamHelper.FromType(System.Type)">
            <summary>
                Obtains the type reference from <see cref="T:System.Type" />.
            </summary>
            <param name="type">Type to turn into Mono.Cecil representation of type refrence.</param>
            <returns>An instance of <see cref="T:Mono.Cecil.TypeReference" /> for the provided type.</returns>
        </member>
        <member name="T:Mono.Cecil.Inject.TypeDefinitionExtensions">
            <summary>
                Extensions for <see cref="T:Mono.Cecil.TypeDefinition" />
            </summary>
        </member>
        <member name="M:Mono.Cecil.Inject.TypeDefinitionExtensions.ChangeAccess(Mono.Cecil.TypeDefinition,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Changes accessibility of a type member (target or a field).
            </summary>
            <param name="type">Type (class, struct) that contains the member to alter.</param>
            <param name="member">Name of the member as a regular expression.</param>
            <param name="makePublic">If true, will make the member public.</param>
            <param name="makeVirtual">If true and the member is a target, will make it public.</param>
            <param name="makeAssignable">
                If true, turns read-only members into assignable ones. NOTE: Will not for for constant
                (marked with "const" prefix) -- only for "readonly".
            </param>
            <param name="recursive">If true, will recusively call this method on nested types as well.</param>
        </member>
        <member name="M:Mono.Cecil.Inject.TypeDefinitionExtensions.GetField(Mono.Cecil.TypeDefinition,System.String)">
            <summary>
                Gets a field by its name.
            </summary>
            <param name="self">Reference to type definition that owns the method/member.</param>
            <param name="memberName">Name of the field.</param>
            <returns>Field definiton of the said field. Null, if none found.</returns>
        </member>
        <member name="M:Mono.Cecil.Inject.TypeDefinitionExtensions.GetInjectionMethod(Mono.Cecil.TypeDefinition,System.String,Mono.Cecil.MethodDefinition,Mono.Cecil.Inject.InjectFlags,System.Int32[],Mono.Cecil.FieldDefinition[])">
            <summary>
                Searches for a method that can be used to inject into the specified target.
            </summary>
            <param name="type">This type in which the possible injection method lies.</param>
            <param name="name">Name of the injection method.</param>
            <param name="target">The target method which to inject.</param>
            <param name="flags">
                Injection flags that specify what values to pass to the injection method and how to inject it. This
                method attempts to find the hook method that satisfies all the specified flags.
            </param>
            <param name="localVarIDs">
                An array of indicies of local variables to pass to the injection method. Used only if
                <see cref="F:Mono.Cecil.Inject.InjectFlags.PassLocals" /> is specified, otherwise ignored.
            </param>
            <param name="memberReferences">
                An array of class fields from the type the target lies in to pass to the injection
                method. Used only if <see cref="F:Mono.Cecil.Inject.InjectFlags.PassFields" /> is specified, otherwise ignored.
            </param>
            <returns>
                An instance of <see cref="T:Mono.Cecil.Inject.InjectionDefinition" />, if a suitable injection method with the given name has been
                found. Otherwise, null.
            </returns>
        </member>
        <member name="M:Mono.Cecil.Inject.TypeDefinitionExtensions.GetMethod(Mono.Cecil.TypeDefinition,System.String)">
            <summary>
                Gets the method by its name. If more overloads exist, only the first one defined is chosen.
            </summary>
            <param name="self">Reference to type definition that owns the method/member.</param>
            <param name="methodName">Name of the method.</param>
            <returns>Method definition for the given method name. If no methods with such names are found, returns null.</returns>
        </member>
        <member name="M:Mono.Cecil.Inject.TypeDefinitionExtensions.GetMethod(Mono.Cecil.TypeDefinition,System.String,Mono.Cecil.TypeReference[])">
            <summary>
                Gets the method by its name. If more overloads exist, only the one that has the same specified parameters is
                chosen.
                To easily obtain parameter types, refer to <see cref="T:Mono.Cecil.Inject.ParamHelper" /> class.
            </summary>
            <param name="self">Reference to type definition that owns the method/member.</param>
            <param name="methodName">Name of the method.</param>
            <param name="paramTypes">Parameter types in the order they are declared in the method.</param>
            <returns>
                Method definition for the given method name and overload. If no methods with such names and parameters are
                found, returns null.
            </returns>
        </member>
        <member name="M:Mono.Cecil.Inject.TypeDefinitionExtensions.GetMethod(Mono.Cecil.TypeDefinition,System.String,System.Type[])">
            <summary>
                Gets the method by its name. If more overloads exist, only the one that has the same specified parameters is
                chosen.
            </summary>
            <param name="self">Reference to type definition that owns the method/member.</param>
            <param name="methodName">Name of the method.</param>
            <param name="types">Parameter types in the order they are declared in the method.</param>
            <returns>
                Method definition for the given method name and overload. If no methods with such names and parameters are
                found, returns null.
            </returns>
        </member>
        <member name="M:Mono.Cecil.Inject.TypeDefinitionExtensions.GetMethod(Mono.Cecil.TypeDefinition,System.String,System.String[])">
            <summary>
                Gets the method by its name. If more overloads exist, only the one that has the same specified parameters is
                chosen.
            </summary>
            <param name="self">Reference to type definition that owns the method/member.</param>
            <param name="methodName">Name of the method.</param>
            <param name="types">
                Full name of the parameter types in the order they are declared in the method. The full name is
                specified by <see cref="T:System.Type" /> specification.
            </param>
            <returns>
                Method definition for the given method name and overload. If no methods with such names and parameters are
                found, returns null.
            </returns>
        </member>
        <member name="M:Mono.Cecil.Inject.TypeDefinitionExtensions.GetMethods(Mono.Cecil.TypeDefinition,System.String)">
            <summary>
                Gets the all the method overloads with the given name.
            </summary>
            <param name="self">Reference to type definition that owns the method/member.</param>
            <param name="methodName">Name of the method.</param>
            <returns>
                An array of all the method overloads with the specified name.
            </returns>
        </member>
        <member name="M:Mono.Cecil.Inject.TypeDefinitionExtensions.MatchMethod(Mono.Cecil.TypeDefinition,System.String,System.Type[])">
            <summary>
                Finds the methods with the given name that have at least the provided parameters. The number of parameters need not
                match, which is why
                the methods returned may have more parameters than passed to this method.
            </summary>
            <param name="self">Reference to type definition that owns the method/member.</param>
            <param name="methodName">Name of the method to match.</param>
            <param name="types">Parameter types in the order they should be declared in the method.</param>
            <returns>An array of methods that have the specified name and *at least* the given parameters.</returns>
        </member>
        <member name="M:Mono.Cecil.Inject.TypeDefinitionExtensions.MatchMethod(Mono.Cecil.TypeDefinition,System.String,Mono.Cecil.TypeReference[])">
            <summary>
                Finds the methods with the given name that have at least the provided parameters. The number of parameters need not
                match, which is why
                the methods returned may have more parameters than passed to this method.
            </summary>
            <param name="self">Reference to type definition that owns the method/member.</param>
            <param name="methodName">Name of the method to match.</param>
            <param name="paramTypes">Parameter types in the order they should be declared in the method.</param>
            <returns>An array of methods that have the specified name and *at least* the given parameters.</returns>
        </member>
        <member name="M:Mono.Cecil.Inject.TypeDefinitionExtensions.MatchMethod(Mono.Cecil.TypeDefinition,System.String,System.String[])">
            <summary>
                Finds the methods with the given name that have at least the provided parameters. The number of parameters need not
                match, which is why
                the methods returned may have more parameters than passed to this method.
            </summary>
            <param name="self">Reference to type definition that owns the method/member.</param>
            <param name="methodName">Name of the method to match.</param>
            <param name="paramTypes">Parameter types in the order they should be declared in the method.</param>
            <returns>An array of methods that have the specified name and *at least* the given parameters.</returns>
        </member>
    </members>
</doc>
